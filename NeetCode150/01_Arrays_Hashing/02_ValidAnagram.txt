##Begin O(NlogN) solution
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        s_charList = list(s)
        temp1 = []
        t_charList = list(t)
        temp2 = []
        for i in s_charList:
            temp1.append(i)
        for j in t_charList:
            temp2.append(j)
        t1 = sorted(temp1)
        t2 = sorted(temp2)
        if (t1 == t2):
            return True
        else:
            return False
##end

##2nd solution: one line nlgon alt

      return sorted(s) == sorted(t)
##end

##3rd solution:
using counter(O(n) Solution)-not allowed in interview as Counter is inbuilt class in python collection

	class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(s)==Counter(t)

##Efficient solution (4th Actual solution)
class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if (len(s) != len(t)):
            return False
        countS = {}
        countT = {}
        for i in range(len(s)):
            countS[s[i]] = 1 + countS.get(s[i],0)
            countT[t[i]] = 1 + countT.get(t[i],0)
        return countS == countT          