class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        ans = defaultdict(list)

        for s in strs:
            count = [0] * 26
            for c in s:
                count[ord(c) - ord("a")] += 1
            ans[tuple(count)].append(s)
         return list(ans.values())

//TC: O(m * n) where m is the no of strings,n=len of strings

2nd approach:
from typing import List

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        # Dictionary to store the grouped anagrams
        anagram_map = {}
        
        # Iterate through each string in the input list
        for string in strs:
            # Sort the string to create the key
            sorted_string = ''.join(sorted(string))
            
            # Add the original string to the list corresponding to the sorted key
            if sorted_string in anagram_map:
                anagram_map[sorted_string].append(string)
            else:
                anagram_map[sorted_string] = [string]
        
        # Return the values of the dictionary, which are the grouped anagrams
        return list(anagram_map.values())

//T.C: O(M*Nlogn) :logN extra for sorted()